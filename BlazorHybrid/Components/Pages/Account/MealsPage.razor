@page "/meals"

@inject UserState UserState
@inject MealsViewModel MealsViewModel

@if (!UserState.IsLoggedIn)
{
    <Unauthorized />
}
else
{
    <div class="min-h-screen pb-24 bg-gray-50">
        <HeaderBannerComponent 
            Title="Your Meals" 
            ImageUrl="@ImageUtils.GetRandomFoodImage()"
            HeightClass="h-48">
            <AdditionalContent>
                <div class="flex items-center justify-between w-full">
                    <div class="flex items-center space-x-4">
                        <span class="flex items-center">
                            <i class="mr-2 fas fa-utensils"></i>
                            @(MealsViewModel.Meals?.Count() ?? 0) meals
                        </span>
                        <span class="flex items-center">
                            <i class="mr-2 fas fa-calendar-alt"></i>
                            @(DateTime.Today.Date == SelectedDate.Date ? "Today"
                                : DateTime.Today.Date > SelectedDate.Date ? $"{(DateTime.Today.Date - SelectedDate.Date).Days} days ago"
                                : $"In {(SelectedDate.Date - DateTime.Today.Date).Days} days")
                        </span>
                    </div>
                    <button 
                        @onclick="() => OpenModal()"
                        class="flex items-center px-4 py-2 space-x-2 text-sm font-medium transition-colors duration-200 rounded-full backdrop-blur-md bg-white/20 hover:bg-white/30">
                        <i class="fas fa-sliders"></i>
                        <span>Customize</span>
                    </button>
                </div>
            </AdditionalContent>
        </HeaderBannerComponent>

        <!-- Main Content -->
        <div class="px-4 pt-56 pb-6 space-y-6">
            <!-- Date Navigation -->
            <div class="flex items-center justify-between p-4 bg-white shadow-sm rounded-2xl">
                <button class="p-2 text-gray-600 transition-transform duration-300 ease-in-out transform hover:text-gray-800 hover:scale-110" @onclick="DecrementDate">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="text-center fade-in" @key="SelectedDate">
                    <p class="text-sm text-gray-500">@SelectedDate.ToString("dddd")</p>
                    <p class="text-lg font-semibold">@SelectedDate.ToString("MMMM d, yyyy")</p>
                </div>
                <button class="p-2 text-gray-600 transition-transform duration-300 ease-in-out transform hover:text-gray-800 hover:scale-110" @onclick="IncrementDate">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>

            <div class="space-y-3">
                <h2 class="text-lg font-bold text-gray-800">Nutrients</h2>
            </div>
            <div class="grid grid-cols-4 gap-3">
                <div class="p-3 text-center bg-white shadow-sm rounded-2xl">
                    <p class="mb-2 text-xl font-bold text-green-600">@Calories</p>
                    <p class="text-xs text-gray-600">Calories</p>
                </div>
                <div class="p-3 text-center bg-white shadow-sm rounded-2xl">
                    <p class="mb-2 text-xl font-bold text-red-600">@Proteins g</p>
                    <p class="text-xs text-gray-600">Protein</p>
                </div>
                <div class="p-3 text-center bg-white shadow-sm rounded-2xl">
                    <p class="mb-2 text-xl font-bold text-blue-600">@Carbs g</p>
                    <p class="text-xs text-gray-600">Carbs</p>
                </div>
                <div class="p-3 text-center bg-white shadow-sm rounded-2xl">
                    <p class="mb-2 text-xl font-bold text-yellow-600">@Fats g</p>
                    <p class="text-xs text-gray-600">Fats</p>
                </div>
            </div>

            <!-- Meal Categories -->
            <div class="space-y-6">
                @foreach (var category in CurrentMealPlan)
                {
                    <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <h2 class="text-lg font-bold text-gray-800">@category</h2>
                            <button 
                                @onclick="OpenMealItemsModal"
                                class="flex items-center px-4 py-2 space-x-2 text-sm font-medium text-white transition-colors duration-200 bg-green-600 rounded-full hover:bg-green-700 active:bg-green-800">
                                <i class="fas fa-plus"></i>
                                <span>Add</span>
                            </button>
                        </div>

                        @{
                            var categoryMeals = MealsViewModel.GetMealsByCategory(category);
                        }

                        @if (categoryMeals.Any())
                        {
                            @foreach (var meal in categoryMeals)
                            {
                                <div class="overflow-hidden transition-all duration-200 bg-white shadow hover:shadow-lg rounded-2xl">
                                    <div class="flex items-center justify-between p-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="flex items-center justify-center w-12 h-12 bg-green-100 rounded-xl">
                                                <i class="text-xl text-green-600 fas fa-utensils"></i>
                                            </div>
                                            <div>
                                                <h3 class="font-semibold text-gray-800">@meal.Name</h3>
                                                <div class="flex items-center space-x-4 text-sm text-gray-500">
                                                    <span class="flex items-center">
                                                        <i class="mr-1 fas fa-fire"></i>
                                                        @meal.TotalCalories kcal
                                                    </span>
                                                    <span class="flex items-center">
                                                        <i class="mr-1 fas fa-clock"></i>
                                                        @meal.DateAdded.ToString("HH:mm")
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <button 
                                                @onclick="() => MealsViewModel.ViewMeal(meal.Id)"
                                                class="p-2 text-gray-400 transition-colors duration-200 rounded-xl hover:bg-gray-100">
                                                <i class="fas fa-chevron-right"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="flex flex-col items-center justify-center py-6 text-center shadow bg-white/50 rounded-2xl">
                                <p class="text-sm text-gray-500">No meals added for @category</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    @if (showMealSettings)
    {
        <ModalComponent Title="Customize Meal Plan" IsOpen="@showMealSettings" OnClose="ClosePlanModal">
            <ChildContent>
                <div class="space-y-4">
                    <h3 class="mb-2 text-sm font-medium text-gray-700">Preset Plans</h3>
                    <div class="grid grid-cols-2 gap-2">
                        <button 
                            @onclick="() => SetMealPlan(BasicPlan)"
                            class="p-3 text-sm text-left transition-colors duration-200 bg-gray-100 rounded-xl hover:bg-gray-200">
                            Basic (3 Meals)
                        </button>
                        <button 
                            @onclick="() => SetMealPlan(ExtendedPlan)"
                            class="p-3 text-sm text-left transition-colors duration-200 bg-gray-100 rounded-xl hover:bg-gray-200">
                            Extended (5 Meals)
                        </button>
                    </div>

                    <h3 class="mb-2 text-sm font-medium text-gray-700">Custom Plan</h3>
                    <div class="space-y-2">
                        @foreach (var category in TempMealPlan)
                        {
                            <div class="flex items-center justify-between p-3 bg-gray-100 rounded-xl">
                                <span>@category</span>
                                <button 
                                    @onclick="() => RemoveCategory(category)"
                                    class="p-1 text-red-500 hover:text-red-600">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        }
                    </div>

                    <div class="flex mt-2">
                        <input 
                            type="text" 
                            @bind="newCategory"
                            placeholder="New category name"
                            class="flex-1 px-3 py-2 border border-gray-300 rounded-l-xl focus:outline-none focus:ring-2 focus:ring-green-500" />
                        <button 
                            @onclick="AddCategory"
                            class="px-4 py-2 text-white bg-green-600 rounded-r-xl hover:bg-green-700">
                            Add
                        </button>
                    </div>
                </div>
            </ChildContent>

            <FooterContent>
                <button 
                    @onclick="ClosePlanModal"
                    class="px-4 py-2 text-gray-600 bg-gray-100 rounded-xl hover:bg-gray-200">
                    Cancel
                </button>
                <button 
                    @onclick="SaveMealSettings"
                    class="px-4 py-2 text-white bg-green-600 rounded-xl hover:bg-green-700">
                    Save Changes
                </button>
            </FooterContent>
        </ModalComponent>
    }

    @if(showEditMeal)
    {
        <MealItemModal IsOpen="@showEditMeal" EditingItem="@CurrentMealItem" OnSave="SaveMealItem" OnClose="CloseMealItemModal" EditMode="@editMealMode"/>
    }

    @code {
        private bool showMealSettings = false;
        private bool showEditMeal = false;
        private bool editMealMode = false;
        private string newCategory = "";
        private List<string> BasicPlan = new() { "Breakfast", "Lunch", "Dinner" };
        private List<string> ExtendedPlan = new() { "Breakfast", "Morning Snack", "Lunch", "Afternoon Snack", "Dinner" };
        private List<string> CurrentMealPlan = new() { "Breakfast", "Lunch", "Dinner" };
        private List<string> TempMealPlan = new();
        private DateTime SelectedDate = DateTime.Today;
        private decimal Calories {get;set;} = 0;
        private decimal Proteins {get;set;} = 0;
        private decimal Carbs {get;set;} = 0;
        private decimal Fats {get;set;} = 0;
        private MealItem? CurrentMealItem {get;set;} = null;

        protected override void OnInitialized()
        {
            if (UserState == null || !UserState.IsLoggedIn || UserState.LoggedInUser == null)
            {
                return;
            }

                MealsViewModel.LoadMeals(UserState.LoggedInUser.Id);

                var todayMeals = MealsViewModel.Meals?.Where(m => m.DateAdded.Date == DateTime.Today) ?? Enumerable.Empty<Meal>();

                Calories = todayMeals.Sum(m => m.TotalCalories);
                Proteins = todayMeals.Sum(m => m.TotalProteins);
                Carbs = todayMeals.Sum(m => m.TotalCarbohydrates);
                Fats = todayMeals.Sum(m => m.TotalFats);
        }


        private void OpenModal()
        {
            UserState.OpenModal();
            showMealSettings = true;
            TempMealPlan = new List<string>(CurrentMealPlan);
        }

        private void ClosePlanModal()
        {
            UserState.CloseModal();
            showMealSettings = false;
        }
        private void SetMealPlan(List<string> plan)
        {
            TempMealPlan = new List<string>(plan);
        }
        private void AddCategory()
        {
            if (!string.IsNullOrWhiteSpace(newCategory) && !TempMealPlan.Contains(newCategory))
            {
                TempMealPlan.Add(newCategory);
                newCategory = "";
            }
        }
        private void RemoveCategory(string category)
        {
            TempMealPlan.Remove(category);
        }
        private void SaveMealSettings()
        {
            CurrentMealPlan = new List<string>(TempMealPlan); 
            ClosePlanModal();
        }
        private void SaveMealItem()
        {
            if (editMealMode && CurrentMealItem != null)
            {
                MealsViewModel.UpdateMealItem(CurrentMealItem);
            }
            else if (CurrentMealItem != null)
            {
                MealsViewModel.AddMealItem(CurrentMealItem);
            }
            MealsViewModel.LoadMeals(UserState.LoggedInUser.Id);
            UserState.CloseModal();
            showEditMeal = false;
            StateHasChanged();
        }
        private void OpenMealItemsModal()
        {
            UserState.OpenModal();
            showEditMeal = true;
            CurrentMealItem = new MealItem();
        }
        private void CloseMealItemModal()
        {
            UserState.CloseModal();
            showEditMeal = false;
        }

        private void DecrementDate()
        {
            SelectedDate = SelectedDate.AddDays(-1);
            UpdateMealSummary();
        }

        private void IncrementDate()
        {
            SelectedDate = SelectedDate.AddDays(1);
            UpdateMealSummary();
        }

        private void UpdateMealSummary()
        {
            var todayMeals = MealsViewModel.Meals.Where(m => m.DateAdded.Date == SelectedDate.Date);
            
            Calories = todayMeals.Sum(m => m.TotalCalories);
            Proteins = todayMeals.Sum(m => m.TotalProteins);
            Carbs = todayMeals.Sum(m => m.TotalCarbohydrates);
            Fats = todayMeals.Sum(m => m.TotalFats);
            StateHasChanged();
        }
    }
}
