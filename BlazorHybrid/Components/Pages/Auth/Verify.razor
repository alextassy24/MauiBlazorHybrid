@page "/verify"
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="flex items-center justify-center min-h-screen p-5 bg-gradient-to-b from-purple-600 to-indigo-800">
    <div class="w-full max-w-md p-8 space-y-6 bg-white shadow-xl rounded-2xl">
        <div class="space-y-3 text-center">
            <h1 class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-purple-800">
                Verify Your Account
            </h1>
            <p class="text-gray-600">
                Enter the 6-digit verification code sent to
                <span class="font-medium text-gray-800">@(UserState.Email)</span>
            </p>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="p-4 text-sm text-red-600 bg-red-50 rounded-xl">
                <p class="flex items-center">
                    <i class="mr-2 fas fa-exclamation-circle"></i>
                    @ErrorMessage
                </p>
            </div>
        }

        <EditForm Model="@this" OnValidSubmit="HandleVerification" class="space-y-6">
            <DataAnnotationsValidator />

            <VerificationInput @bind-Code="VerificationCode" />

            <div class="space-y-4">
                <button type="submit"
                        disabled="@(!IsValidCode())"
                        class="w-full py-3 font-semibold text-white transition-all duration-200 bg-purple-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2">
                    Verify Account
                </button>

                @* <button type="button"
                        @onclick="ResendCode"
                        class="w-full py-3 font-semibold text-purple-600 transition-all duration-200 rounded-lg bg-purple-50 hover:bg-purple-100 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2">
                    Resend Code
                </button> *@
            </div>
        </EditForm>

        <div class="text-center">
            <button @onclick="GoBack" 
                    class="text-sm text-gray-600 transition-colors duration-200 hover:text-purple-600">
                ‚Üê Back to Login
            </button>
        </div>
    </div>
</div>

@code {
    private string VerificationCode { get; set; } = string.Empty;
    private string ErrorMessage = string.Empty;

    private bool IsValidCode() => VerificationCode.Length == 6 && VerificationCode.All(char.IsDigit);

    private async Task HandleVerification()
    {
        try
        {
            if (!IsValidCode())
            {
                ErrorMessage = "Please enter a valid 6-digit code.";
                return;
            }

            var result = await AuthService.VerifyAccountAsync(UserState.Email, VerificationCode);
            if (result.IsSuccess)
            {
                UserState.ClearEmail();
                NavigationManager.NavigateTo("/login", true);
            }
            else
            {
                ErrorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred. Please try again.";
        }
    }

    @* private async Task ResendCode()
    {
        try
        {
            var result = await AuthService.ResendVerificationCodeAsync(UserState.Email);
            if (result.IsSuccess)
            {
                ErrorMessage = string.Empty;
                VerificationCode = string.Empty;
                StateHasChanged();
            }
            else
            {
                ErrorMessage = result.Message;
            }
        }
        catch
        {
            ErrorMessage = "Failed to resend verification code. Please try again.";
        }
    } *@

    private void GoBack()
    {
        NavigationManager.NavigateTo("/login");
    }
}
